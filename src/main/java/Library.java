import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.util.ArrayList;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    private OkHttpClient client;
    private String apiKey = "53d4ced445dc683d104322a4c8fdb9fc";

    public Library() {
        client = new OkHttpClient();
    }

    private void printResponse(Request request) {
        Response response = null;
        try {
            response = client.newCall(request).execute();
            assert response.body() != null;
            System.out.println(response.body().string());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void sendRequest(HttpUrl.Builder urlBuilder) {
        urlBuilder.addQueryParameter("APPID", apiKey);
        String url = urlBuilder.build().toString();
        System.out.println(url);

        Request request = new Request.Builder().url(url).build();

        printResponse(request);
    }


    public boolean getWeatherByCityName(String city, String countryCode) {
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/weather?").newBuilder();
        urlBuilder.addEncodedQueryParameter("q", city + "," + countryCode);
        sendRequest(urlBuilder);
        return true;
    }

    public boolean getWeatherByCityID(String cityID) {
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/weather?").newBuilder();
        urlBuilder.addQueryParameter("id", cityID);
        sendRequest(urlBuilder);
        return true;
    }

    public boolean getWeatherByCoordinates(String lat, String lon) {
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/weather?").newBuilder();
        urlBuilder.addQueryParameter("lat", lat);
        urlBuilder.addQueryParameter("lon", lon);
        sendRequest(urlBuilder);
        return true;
    }

    public boolean getWeatherByZip(String zip, String countryCode) {
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/weather?").newBuilder();
        urlBuilder.addQueryParameter("zip", zip + "," + countryCode);
        sendRequest(urlBuilder);
        return true;
    }

    public boolean getWeatherForCitiesInRectangle(String lonLeft, String LatBottom, String lonRight, String latTop, String zoom) {
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/box/city?").newBuilder();
        urlBuilder.addEncodedQueryParameter("bbox", lonLeft + "," + LatBottom + "," + lonRight + "," + latTop + "," + zoom);
        sendRequest(urlBuilder);
        return true;
    }

    public boolean getWeatherForCitiesInCircle(String lat, String lon, String count) {
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/find?").newBuilder();
        urlBuilder.addQueryParameter("lat", lat);
        urlBuilder.addQueryParameter("lon", lon);
        urlBuilder.addQueryParameter("cnt", count);
        sendRequest(urlBuilder);
        return true;
    }

    public boolean getWeatherForCitiesByID(ArrayList<String> idList){
        HttpUrl.Builder urlBuilder = HttpUrl.parse("https://api.openweathermap.org/data/2.5/group?").newBuilder();
        StringBuilder stringBuilder = new StringBuilder();
        int remaining = idList.size();
        for (String id: idList) {
            stringBuilder.append(id);
            remaining--;
            if(remaining > 0)
                stringBuilder.append(",");
        }
        urlBuilder.addQueryParameter("id", stringBuilder.toString());
        sendRequest(urlBuilder);
        return true;
    }
}
