import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Objects;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
class Library {
    private OkHttpClient client;
    private String apiKey;
    private final String weatherURL = "https://api.openweathermap.org/data/2.5/weather?";
    private final String boxURL = "https://api.openweathermap.org/data/2.5/box/city?";
    private final String circleURL = "https://api.openweathermap.org/data/2.5/find?";
    private final String groupIdURL = "https://api.openweathermap.org/data/2.5/group?";

    Library(String apiKey) {
        this.apiKey = apiKey;
        client = new OkHttpClient();
    }

    private String getResponseString(Request request) {
        Response response;
        try {
            response = client.newCall(request).execute();
            assert response.body() != null;
            return response.body().string();
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    private String sendRequest(HttpUrl.Builder urlBuilder) {
        urlBuilder.addQueryParameter("APPID", apiKey);
        String url = urlBuilder.build().toString();
        System.out.println("Request URL: " + url);

        Request request = new Request.Builder().url(url).build();

        return getResponseString(request);
    }

    private HttpUrl.Builder getURLBuilder(String url) {
        return Objects.requireNonNull(HttpUrl.parse(url)).newBuilder();
    }


    String getWeatherByCityName(String city, String countryCode) {
        HttpUrl.Builder urlBuilder = getURLBuilder(weatherURL);
        urlBuilder.addEncodedQueryParameter("q", city + "," + countryCode);
        return sendRequest(urlBuilder);
    }

    String getWeatherByCityID(String cityID) {
        HttpUrl.Builder urlBuilder = getURLBuilder(weatherURL);
        urlBuilder.addQueryParameter("id", cityID);
        return sendRequest(urlBuilder);
    }

    String getWeatherByCoordinates(String lat, String lon) {
        HttpUrl.Builder urlBuilder = getURLBuilder(weatherURL);
        urlBuilder.addQueryParameter("lat", lat);
        urlBuilder.addQueryParameter("lon", lon);
        return sendRequest(urlBuilder);
    }

    String getWeatherByZip(String zip, String countryCode) {
        HttpUrl.Builder urlBuilder = getURLBuilder(weatherURL);
        urlBuilder.addQueryParameter("zip", zip + "," + countryCode);
        return sendRequest(urlBuilder);
    }

    String getWeatherForCitiesInRectangle(String lonLeft, String LatBottom, String lonRight, String latTop, String zoom) {
        HttpUrl.Builder urlBuilder = getURLBuilder(boxURL);
        urlBuilder.addEncodedQueryParameter("bbox", lonLeft + "," + LatBottom + "," + lonRight + "," + latTop + "," + zoom);
        return sendRequest(urlBuilder);
    }

    String getWeatherForCitiesInCircle(String lat, String lon, String count) {
        HttpUrl.Builder urlBuilder = getURLBuilder(circleURL);
        urlBuilder.addQueryParameter("lat", lat);
        urlBuilder.addQueryParameter("lon", lon);
        urlBuilder.addQueryParameter("cnt", count);
        return sendRequest(urlBuilder);
    }

    String getWeatherForCitiesByID(ArrayList<String> idList) {
        HttpUrl.Builder urlBuilder = getURLBuilder(groupIdURL);
        StringBuilder stringBuilder = new StringBuilder();
        int remaining = idList.size();
        for (String id : idList) {
            stringBuilder.append(id);
            remaining--;
            if (remaining > 0)
                stringBuilder.append(",");
        }
        urlBuilder.addQueryParameter("id", stringBuilder.toString());
        return sendRequest(urlBuilder);
    }
}
